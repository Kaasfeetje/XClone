// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
    binaryTargets   = ["linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    image         String?
    email         String?   @unique
    emailVerified DateTime?

    accounts    Account[]
    sessions    Session[]
    // Added by me
    username    String?   @unique
    displayName String?
    createdAt   DateTime  @default(now())

    bio            String?
    profileImageId String? @unique
    profileImage   Image?  @relation("Profile Image", fields: [profileImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    bannerImageId  String? @unique
    bannerImage    Image?  @relation("Banner Image", fields: [bannerImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    location       String? //String for now
    website        String?
    pinnedPost     Post?

    // Posts
    posts         Post[]          @relation("Post Author")
    likes         PostLike[]      @relation("Likes")
    reposts       PostRepost[]    @relation("Reposts")
    mentions      Post[]          @relation("Mentions")
    // Highlights
    highlights    PostHighlight[] @relation("Highlights")
    // Bookmark
    bookmarks     Bookmark[]
    bookmarkLists BookmarkList[]
    // Following
    following     Follow[]        @relation("Follower")
    followers     Follow[]        @relation("Followed")
    // Search
    searches      Search[]        @relation("Searcher")
    searched      Search[]        @relation("Searched")
    // Images
    images        Image[]
    // Lists
    lists         List[]
    listFollowers ListFollow[]    @relation("List Follower")
    listMembers   ListMember[]    @relation("List Member")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// DIVIDER \\

model Post {
    id                String             @id @default(cuid())
    createdAt         DateTime           @default(now())
    commentPermission COMMENTPERMISSIONS @default(EVERYONE)

    // Content
    textContent String?
    images      Image[]

    //Mentions/Tags & Hashtags
    mentions     User[]         @relation("Mentions")
    hashtags     HashTag[]      @relation("Hashtags")
    // Author
    user         User           @relation("Post Author", fields: [userId], references: [id])
    userId       String
    // Comments
    commentToId  String?
    commentTo    Post?          @relation("commentPost", fields: [commentToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    comments     Post[]         @relation("commentPost")
    //Likes & Reposts
    likes        PostLike[]     @relation("Likes")
    reposts      PostRepost[]   @relation("Reposts")
    bookmarks    Bookmark[]
    // Pinned post
    pinnedUserId String?        @unique
    pinnedUser   User?          @relation(fields: [pinnedUserId], references: [id])
    // Highlights
    highlight    PostHighlight? @relation("Highlights")

    @@index([userId])
    @@index([commentToId])
}

model PostLike {
    postId    String
    post      Post     @relation("Likes", fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation("Likes", fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@unique([postId, userId])
    @@index([userId])
    @@index([postId])
}

model PostRepost {
    postId    String
    post      Post     @relation("Reposts", fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation("Reposts", fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@unique([postId, userId])
    @@index([userId])
    @@index([postId])
}

model PostHighlight {
    postId    String   @unique
    post      Post     @relation("Highlights", fields: [postId], references: [id])
    userId    String
    user      User     @relation("Highlights", fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@unique([postId, userId])
    @@index([userId])
    @@index([postId])
}

model Bookmark {
    userId    String
    user      User          @relation(fields: [userId], references: [id])
    postId    String
    post      Post          @relation(fields: [postId], references: [id])
    createdAt DateTime      @default(now())
    // List
    listId    String?
    list      BookmarkList? @relation(fields: [listId], references: [id])

    @@id([userId, postId])
    @@index([userId])
    @@index([postId])
    @@index([listId])
}

model BookmarkList {
    id        String     @id @default(uuid())
    name      String
    userId    String
    user      User       @relation(fields: [userId], references: [id])
    createdAt DateTime   @default(now())
    bookmarks Bookmark[]

    @@unique([name, userId])
    @@index([userId])
}

model HashTag {
    hashtag   String   @id @unique
    createdAt DateTime @default(now())
    posts     Post[]   @relation("Hashtags")

    searches Search[]
}

model Follow {
    followerId String //The person who initiates the follow
    follower   User   @relation("Follower", fields: [followerId], references: [id])
    followedId String //The person who is being followed
    followed   User   @relation("Followed", fields: [followedId], references: [id])

    createdAt DateTime @default(now())

    @@id([followerId, followedId])
    @@index([followerId])
    @@index([followedId])
}

model Search {
    id             String   @id @default(uuid())
    userId         String
    user           User     @relation("Searcher", fields: [userId], references: [id])
    text           String?
    hashtagId      String?
    hashtag        HashTag? @relation(fields: [hashtagId], references: [hashtag])
    searchedUserId String?
    searchedUser   User?    @relation("Searched", fields: [searchedUserId], references: [id])

    @@index([userId])
    @@index([hashtagId])
    @@index([searchedUserId])
}

model Image {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    type      String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    postId    String?
    post      Post?    @relation(fields: [postId], references: [id])

    profileImageUsers User[] @relation("Profile Image")
    bannerImageUsers  User[] @relation("Banner Image")
    bannerImageLists  List[]

    @@index([userId])
    @@index([postId])
}

model List {
    id            String         @id @default(uuid())
    name          String
    bio           String?
    visibility    LISTVISIBILITY @default(PUBLIC)
    userId        String
    user          User           @relation(fields: [userId], references: [id])
    bannerImageId String?
    bannerImage   Image?         @relation(fields: [bannerImageId], references: [id])

    followers   ListFollow[]
    listMembers ListMember[]

    @@index([bannerImageId])
    @@index([userId])
}

model ListMember {
    memberId String
    member   User   @relation("List Member", fields: [memberId], references: [id])
    listId   String
    list     List   @relation(fields: [listId], references: [id])

    createdAt DateTime @default(now())

    @@id([memberId, listId])
    @@index([memberId])
    @@index([listId])
}

model ListFollow {
    followerId String
    follower   User   @relation("List Follower", fields: [followerId], references: [id])
    listId     String
    list       List   @relation(fields: [listId], references: [id])

    createdAt DateTime @default(now())

    @@id([followerId, listId])
    @@index([followerId])
    @@index([listId])
}

enum COMMENTPERMISSIONS {
    EVERYONE
    FOLLOW
    VERIFIED
    MENTIONED
}

enum LISTVISIBILITY {
    PUBLIC
    PRIVATE
}
