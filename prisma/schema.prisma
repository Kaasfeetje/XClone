// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    image         String?
    email         String?   @unique
    emailVerified DateTime?
    // Added by me
    profileImage  String?
    username      String?   @unique
    displayName   String?
    createdAt     DateTime  @default(now())

    bio         String?
    bannerImage String?
    location    String? //String for now
    website     String?

    accounts   Account[]
    sessions   Session[]
    Post       Post[]
    PostLike   PostLike[]   @relation("Likes")
    PostRepost PostRepost[] @relation("Reposts")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// DIVIDED \\

model Post {
    id                String             @id @default(cuid())
    textContent       String?
    createdAt         DateTime           @default(now())
    likeCount         Int                @default(0)
    repostCount       Int                @default(0)
    commentCount      Int                @default(0)
    commentPermission COMMENTPERMISSIONS @default(EVERYONE)

    // Author
    user        User         @relation(fields: [userId], references: [id])
    userId      String
    // Comments
    commentToId String?
    commentTo   Post?        @relation("commentPost", fields: [commentToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    comments    Post[]       @relation("commentPost")
    //Likes & Reposts
    likes       PostLike[]   @relation("Likes")
    reposts     PostRepost[] @relation("Reposts")

    @@index([userId])
    @@index([commentToId])
}

model PostLike {
    postId    String
    post      Post     @relation("Likes", fields: [postId], references: [id])
    userId    String
    user      User     @relation("Likes", fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@unique([postId, userId])
    @@index([userId, postId])
}

model PostRepost {
    postId    String
    post      Post     @relation("Reposts", fields: [postId], references: [id])
    userId    String
    user      User     @relation("Reposts", fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@unique([postId, userId])
    @@index([userId, postId])
}

enum COMMENTPERMISSIONS {
    EVERYONE
    FOLLOW
    VERIFIED
    MENTIONED
}
